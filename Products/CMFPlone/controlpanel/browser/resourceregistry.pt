<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      lang="en"
      metal:use-macro="context/prefs_main_template/macros/master"
      i18n:domain="plone">

<body>


<metal:main metal:fill-slot="prefs_configlet_main" i18n:domain="plone">
  <header>

    <h1 class="documentFirstHeading"
        i18n:translate="">Resource Registry</h1>

    <div class="text-muted"
       i18n:translate="">
      Configure Plone JavaScript/CSS resource bundles.
    </div>
  </header>

   <div id="content-core">
    <div class="portalMessage statusmessage statusmessage-error alert alert-danger js-errors">
        <tal:icon tal:replace="structure python:icons.tag('plone-statusmessage-error', tag_alt='', tag_class='statusmessage-icon mb-1 me-2')" />
        <strong i18n:translate="">Javascript disabled or error(s) occurred</strong>
        <span class="content"
              i18n:translate="">
            If this message persists, a Javascript Error occurred within the
            resources below.
        </span>
    </div>
    <div tal:condition="python:view.global_debug_mode()"
         class="portalMessage statusmessage statusmessage-info alert alert-info"
         role="alert">
        <tal:icon tal:replace="structure python:icons.tag('plone-statusmessage-info', tag_alt='', tag_class='statusmessage-icon mb-1 me-2')" />
        <strong i18n:translate="">Global Debug Mode Activated</strong>
        <span class="content"
              i18n:translate="">
            This is great for development.
            Resource hashes will be recalculated on each request.
            This is expensive, do not use use in production!
        </span>
    </div>
    <form tal:condition="python:not view.global_debug_mode() and view.debug_mode()"
          method="post" action="${python:context.absolute_url()}/@@resourceregistry-controlpanel">
      <div class="portalMessage statusmessage statusmessage-info alert alert-warning"
         role="alert">
          <button name="action" value="deactivate_cache" type="submit" class="btn btn-primary ms-1 me-1 mb-1 float-end" i18n:translate="">Deactivate</button>
        <tal:icon tal:replace="structure python:icons.tag('plone-statusmessage-warning', tag_alt='', tag_class='statusmessage-icon mb-1')" />
        <strong i18n:translate="">Resource Debug Mode Activated</strong>
        <span class="content"
              i18n:translate="">
            Resources are not cached in Plone.
            Their hashes will be recalculated on each request.
            This is expensive, do not use use in production!
        </span>
      </div>
    </form>
    <form tal:condition="python:not view.global_debug_mode() and not view.debug_mode()"
          method="post" action="${python:context.absolute_url()}/@@resourceregistry-controlpanel">
      <div class="portalMessage statusmessage statusmessage-info alert alert-info"
         role="alert">
          <button name="action" value="activate_cache" type="submit" class="btn btn-primary ms-1 me-1 mb-1 float-end" i18n:translate="">Activate Debug Mode</button>
        <tal:icon tal:replace="structure python:icons.tag('plone-statusmessage-info', tag_alt='', tag_class='statusmessage-icon mb-1')" />
        <strong i18n:translate="">Production Mode Activated</strong>
        <span class="content"
              i18n:translate="">
            Resources are fast and hashes are cached in Plone.
            Changes in resource settings are not applied directly.
        </span>
      </div>
    </form>
    <div class="accordion" id="accordionRR" tal:define="dummy python:view.process_form()">
      <tal:block tal:repeat="bundle python:view.bundles_data">
      <div class="accordion-item ${python:'active' if bundle['name'] == request.form.get('name', None) else ''}">
           <h2 class="accordion-header" id="heading-${python:bundle['safe_name']}">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-${python:bundle['safe_name']}" aria-expanded="false" aria-controls="collapse-${python:bundle['safe_name']}">
              <span tal:condition="python:bundle['name'] and bundle['enabled']" i18n:translate="" class="me-2"><tal:icon tal:replace="structure python:icons.tag('file-check', tag_alt='Enabled bundle')" /></span>
              <span tal:condition="python:bundle['name'] and not bundle['enabled']" i18n:translate="" class="me-2"><tal:icon tal:replace="structure python:icons.tag('file-x', tag_alt='Disabled bundle')" /></span>
              <span tal:condition="python:not bundle['name']" i18n:translate="" class="me-2"><tal:icon tal:replace="structure python:icons.tag('file-plus', tag_alt='Add a bundle')" /></span>
              <strong tal:condition="python:bundle['name']">${python:bundle["name"]}</strong>
              <strong tal:condition="python:not bundle['name']" i18n:translate="">Add new bundle</strong>
            </button>
          </h2>
          <div id="collapse-${python:bundle['safe_name']}" class="accordion-collapse collapse show" aria-labelledby="heading${python:bundle['safe_name']}" data-bs-parent="#accordionRR">
            <div class="accordion-body">
              <form method="post" action="${python:context.absolute_url()}/@@resourceregistry-controlpanel">
                <input type="hidden" name="original_name" value="${python:bundle['name']}" />
                <div class="mb-3">
                  <label for="name" class="form-label" i18n:translate="label_bundle_name">Name</label>
                  <input type="text" class="form-control" name="name" value="${python:bundle['name']}"/>
                </div>
                <div class="mb-3">
                  <label for="jscompilation" class="form-label">Javascript</label>
                  <input type="text" class="form-control" name="jscompilation" value="${python:bundle['jscompilation']}"/>
                </div>
                <div class="mb-3">
                  <label for="csscompilation" class="form-label">CSS</label>
                  <input type="text" class="form-control" name="csscompilation" value="${python:bundle['csscompilation']}"/>
                </div>
                <div class="form-check mb-3">
                  <input class="form-check-input" type="checkbox" value="" name="enabled" ${python:"checked" if bundle["enabled"] else ''} />
                  <label class="form-check-label" for="enabled" i18n:translate="label_bundle_enabled">
                    enabled
                  </label>
                </div>
                <div class="mb-3">
                  <label for="expression" class="form-label" i18n:translate="label_bundle_condition">Condition</label>
                  <input type="text" class="form-control" name="expression" value="${python:bundle['expression']}" placeholder="expression" i18n:attributes="placeholder label_expression_placeholder"/>
                </div>
                <div class="mb-3">
                  <label for="depends" class="form-label" i18n:translate="">Depends on</label>
                  <input type="text" class="form-control" name="depends" value="${python:bundle['depends']}" />
                </div>
                <div class="form-check mb-3">
                  <input class="form-check-input" type="checkbox" value="1" name="load_async" ${python:"checked" if bundle["load_async"] else ''} />
                  <label class="form-check-label" for="load_async" i18n:translate="label_bundle_js_load_async">
                    Async
                  </label>
                </div>
                <div class="form-check mb-3">
                  <input class="form-check-input" type="checkbox" value="1" name="load_defer" ${python:"checked" if bundle["load_defer"] else ''} />
                  <label class="form-check-label" for="load_defer" i18n:translate="label_bundle_js_load_defer">
                    Defer
                  </label>
                </div>
                <div class="mb-3">
                  <button tal:condition="python:bundle['name']" name="action" value="update" type="submit" class="btn btn-primary me-1" i18n:translate="">Save</button>
                  <button tal:condition="python:not bundle['name']" name="action" value="add" type="submit" class="btn btn-success me-1" i18n:translate="">Add</button>
                  <button tal:condition="python:bundle['name']" name="action" value="delete" type="submit" class="btn btn-danger" i18n:translate="">Delete</button>
                </div>
              </form>
          </div>
        </div>
      </div>
      </tal:block>
    </div>
    <div class="mt-3">
      <h2 i18n:translate="">Additional Resources</h2>
      <p i18n:translate="">After the above resources, the following might get loaded:</p>
      <dl>
        <dt i18n:translate="">Theme CSS and JavaScript</dt>
        <dd i18n:translate="">
          The activated Plone-Theme usually provides one CSS bundle and sometimes a javascript bundle.
        </dd>
        <dt i18n:translate="">Custom CSS</dt>
        <dd i18n:translate="">
          At last a custom CSS is loaded, if non-empty.
          It can be used to override the previous loaded CSS.
          It is provided for tinkerers and those in need of urgent through-the-web changes.
          Hint: <a href="${python:context.absolute_url()}/@@theming-controlpanel#autotoc-item-autotoc-1" i18n:name="link" i18n:translate="">Edit the Custom CSS in the Theming-Control-Panel</a>.
        </dd>
      </dl>
    </div>
   </div>
   <script>
     /* collapse accordion via script here, so that it stays open when JS is disabled */
     window.addEventListener('DOMContentLoaded', (event) => {
      document.querySelector(".alert.js-errors").style.display = "none";
      document.querySelectorAll(".accordion-item:not(.active) .accordion-button").forEach(el => el.classList.add("collapsed"));
      document.querySelectorAll(".accordion-item:not(.active) .accordion-collapse").forEach(el => el.classList.remove("show"));
    });
   </script>
</metal:main>

</body>
</html>

