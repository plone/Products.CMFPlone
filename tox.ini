# Generated from:
# https://github.com/plone/meta/tree/main/src/plone/meta/default
# See the inline comments on how to expand/tweak this configuration file
[tox]
# We need 4.4.0 for constrain_package_deps.
min_version = 4.4.0
envlist =
    lint
    test
    py312-plone62
    py310-plone62
    dependencies


##
# Add extra configuration options in .meta.toml:
# - to specify a custom testing combination of Plone and python versions, use `test_matrix`
# - to specify extra custom environments, use `envlist_lines`
# - to specify extra `tox` top-level options, use `config_lines`
#  [tox]
#  test_matrix = {"6.2" = ["3.13", "3.12"], "6.1" = ["3.10", "3.9"]}
#  envlist_lines = """
#      my_other_environment
#  """
#  config_lines = """
#  my_extra_top_level_tox_configuration_lines
#  """
##

[testenv:init]
description = Prepare environment
skip_install = true
allowlist_externals =
    echo
commands =
    echo "Initial setup complete"

[testenv:format]
description = automatically reformat code
skip_install = true
deps =
    pre-commit
commands =
    pre-commit run -a pyupgrade
    pre-commit run -a isort
    pre-commit run -a black
    pre-commit run -a zpretty

[testenv:lint]
description = run linters that will help improve the code style
skip_install = true
deps =
    pre-commit
commands =
    pre-commit run -a

[testenv:dependencies]
description = check if the package defines all its dependencies
skip_install = true
deps =
    build
    z3c.dependencychecker==2.14.3
commands =
    python -m build --sdist
    dependencychecker

[testenv:dependencies-graph]
description = generate a graph out of the dependencies of the package
skip_install = false
allowlist_externals =
    sh
deps =
    pipdeptree==2.5.1
    graphviz  # optional dependency of pipdeptree
commands =
    sh -c 'pipdeptree --exclude setuptools,wheel,pipdeptree,zope.interface,zope.component --graph-output svg > dependencies.svg'


[test_runner]
deps = zope.testrunner
test =
    rfbrowser init
    zope-testrunner --all --test-path={toxinidir} -s Products.CMFPlone {posargs}
coverage =
    rfbrowser init
    coverage run --branch --source Products.CMFPlone {envbindir}/zope-testrunner --quiet --all --test-path={toxinidir} -s Products.CMFPlone {posargs}
    coverage report -m --format markdown
    coverage xml
    coverage html

[base]
description = shared configuration for tests and coverage
use_develop = true
skip_install = false
constrain_package_deps = true
set_env =
    ROBOT_BROWSER=headlesschrome

##
# Specify extra test environment variables in .meta.toml:
#  [tox]
#  test_environment_variables = """
#      PIP_EXTRA_INDEX_URL=https://my-pypi.my-server.com/
#  """
#
# Set constrain_package_deps .meta.toml:
#  [tox]
#  constrain_package_deps = false
##
deps =
    {[test_runner]deps}
    plone62: -c https://dist.plone.org/release/6.2-dev/constraints.txt

##
# Specify additional deps in .meta.toml:
#  [tox]
#  test_deps_additional = """
#     -esources/plonegovbr.portal_base[test]
#  """
#
# Specify a custom constraints file in .meta.toml:
#  [tox]
#  constraints_file = "https://my-server.com/constraints.txt"
##
extras =
    test


##
# Add extra configuration options in .meta.toml:
#  [tox]
#  test_extras = """
#      tests
#      widgets
#  """
#
# Add extra configuration options in .meta.toml:
#  [tox]
#  testenv_options = """
#  basepython = /usr/bin/python3.8
#  """
##

[testenv:test]
description = run the distribution tests
use_develop = {[base]use_develop}
skip_install = {[base]skip_install}
constrain_package_deps = {[base]constrain_package_deps}
set_env = {[base]set_env}
deps =
    {[test_runner]deps}
    -c https://dist.plone.org/release/6.2-dev/constraints.txt
commands = {[test_runner]test}
extras = {[base]extras}


[testenv]
description = run the distribution tests (generative environments)
use_develop = {[base]use_develop}
skip_install = {[base]skip_install}
constrain_package_deps = {[base]constrain_package_deps}
set_env = {[base]set_env}
deps = {[base]deps}
commands = {[test_runner]test}
extras = {[base]extras}


[testenv:coverage]
description = get a test coverage report
use_develop = {[base]use_develop}
skip_install = {[base]skip_install}
constrain_package_deps = {[base]constrain_package_deps}
set_env = {[base]set_env}
deps =
    {[test_runner]deps}
    coverage
    -c https://dist.plone.org/release/6.2-dev/constraints.txt
commands = {[test_runner]coverage}
extras = {[base]extras}


[testenv:release-check]
description = ensure that the distribution is ready to release
skip_install = true
deps =
    twine
    build
    towncrier
    -c https://dist.plone.org/release/6.2-dev/constraints.txt

commands =
    # fake version to not have to install the package
    # we build the change log as news entries might break
    # the README that is displayed on PyPI
    towncrier build --version=100.0.0 --yes
    python -m build --sdist
    twine check dist/*

[testenv:circular]
description = ensure there are no cyclic dependencies
use_develop = true
skip_install = false
# Here we must always constrain the package deps to what is already installed,
# otherwise we simply get the latest from PyPI, which may not work.
constrain_package_deps = true
set_env =

##
# Specify extra test environment variables in .meta.toml:
#  [tox]
#  test_environment_variables = """
#      PIP_EXTRA_INDEX_URL=https://my-pypi.my-server.com/
#  """
##
allowlist_externals =
    sh
deps =
    pipdeptree
    pipforester
    -c https://dist.plone.org/release/6.2-dev/constraints.txt

commands =
    # Generate the full dependency tree
    sh -c 'pipdeptree -j > forest.json'
    # Generate a DOT graph with the circular dependencies, if any
    pipforester -i forest.json -o forest.dot --cycles
    # Report if there are any circular dependencies, i.e. error if there are any
    pipforester -i forest.json --check-cycles -o /dev/null


##
# Add extra configuration options in .meta.toml:
#  [tox]
#  extra_lines = """
#  _your own configuration lines_
#  """
##
